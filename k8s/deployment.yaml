apiVersion: apps/v1
kind: Deployment
metadata:
  name: promotions-deployment
  namespace: default
  labels:
    app: promotions
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: promotions
  template:
    metadata:
      labels:
        app: promotions
    spec:
      terminationGracePeriodSeconds: 30

      # Wait for the database to be ready before starting the app container to avoid CrashLoop
      initContainers:
        - name: wait-for-postgres
          image: postgres:15-alpine
          imagePullPolicy: IfNotPresent
          command:
            - sh
            - -c
            - |
              echo "Waiting for Postgres at postgres:5432 ..."
              until pg_isready -h postgres -p 5432 -d promotions; do
                echo "Postgres is not ready yet. Sleeping 2s..."
                sleep 2
              done
              echo "Postgres is ready!"
          # If your PG is configured with strict authentication, inject the user arg here: -U postgres
          # pg_isready only checks "accepting connections" and usually does not require a password

      containers:
        - name: promotions
          image: cluster-registry:5000/promotions:1.0
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          env:
            - name: FLASK_ENV
              value: "production"
            - name: PORT
              value: "8080"
            # Inject DATABASE_URI from Secret (replaces the previous hardcoded value)
            - name: DATABASE_URI
              valueFrom:
                secretKeyRef:
                  name: promotions-db
                  key: DATABASE_URI
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 2
            failureThreshold: 3
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
            initialDelaySeconds: 15
            periodSeconds: 20
            timeoutSeconds: 2
            failureThreshold: 3

          # If you need resource constraints, add requests/limits in K8S-13
          resources:
            requests:
              cpu: "100m"
              memory: "128Mi"
            limits:
              cpu: "500m"
              memory: "512Mi"
